#!/bin/env bash
#
#  ┓•   ┓   
# ┏┃┓╋┓┏┣┓┏┓
# ┗┗┗┗┗┻┗┛┗  Version 1.0
# A media streamer for the command line.
# Written by D.Sánchez (c) 2024
# Published under the EU-GPL        
# https://github.com/dsancheznet
#

#Set the internal field separator to \n
IFS=$'\n'

# Import configurations
source ~/.clituberc

#Welcome Screen
whiptail --title "Welcome" --msgbox "    ██████╗██╗     ██╗████████╗██╗   ██╗██████╗ ███████╗\n   ██╔════╝██║     ██║╚══██╔══╝██║   ██║██╔══██╗██╔════╝\n   ██║     ██║     ██║   ██║   ██║   ██║██████╔╝█████╗  \n   ██║     ██║     ██║   ██║   ██║   ██║██╔══██╗██╔══╝  \n   ╚██████╗███████╗██║   ██║   ╚██████╔╝██████╔╝███████╗\n    ╚═════╝╚══════╝╚═╝   ╚═╝    ╚═════╝ ╚═════╝ ╚══════╝\n\n    Written by D.Sánchez (c)2024" 14 64

# Youtube Serch function
function search_youtube () {
    #Do we have an old result file?
    if [ -f "$RESULTS" ]; then
        #YES - Well, then empty it.
        : > $RESULTS
    else
        #NO - Create an empty result file
        touch $RESULTS
    fi

    # Ask for the search term
    SEARCHTERM=$(whiptail --inputbox "Please provide a search term:" 8 69 --ok-button "Search" --cancel-button "Back" --title "Search Youtube..." 3>&1 1>&2 2>&3)

    # Is the searchterm empty
    if [[ "$SEARCHTERM" = "" ]]; then
        #YES - Then exit the funcion and go back to the main menu.
        return
    fi
 
    # Launch a youtube search in the background for the search term
    yt-dlp --extractor-args youtube:player_client=ios,web ytsearch$SEARCHITEMS:"$SEARCHTERM" --print "%(id)s (%(duration>%H:%M:%S)s) %(title)s%(13)c" >> $RESULTS &

    { # This block measures the percentage of the downloaded data ( since this is asynchronically ) 
	    # Create a variable to hold the last acknowledged percentage
	    OLDY=""
	    # Create a variable to hold the actual percentage
	    ITEMS=""
	    # Loop infinitely
	    while : ; do
	        # Loop until a new item has been downloaded
	        until [ "$OLDY" != "$ITEMS" ]
	        do
	    	    # Count the items that have been downloaded
	            ITEMS=`cat /tmp/results.tmp | wc -l`
	        done
	        # Set this percentage as acknowledged
	        OLDY=$ITEMS
	        # Calculate a numerical percentage
	        ITEMPERCENTAGE=$(( ITEMS*100/SEARCHITEMS ))
	        # Send this percentage to whiptail
	        echo $ITEMPERCENTAGE
	        # Is the download finished?
	        if [ "$ITEMS" = "$SEARCHITEMS" ]; then break; fi;#YES - exit the loop
	    done
    } | whiptail --gauge "Downloading search results..." 6 89 0
    # Now we have the data, let's process it
    while :;do
        # Read the results from disk
        DATA=`cat $RESULTS`
        # Declare a temporary counter
        COUNTER=0
        # Iterate over each line of the the DATA
        for LINE in $DATA; do
            # Append item to MYARRAY (this is the video-id)
            MYARRAY[COUNTER]="$(echo $LINE | grep -o -E '^[a-zA-Z0-9_\-]* ')"
    	    # Perform first of three steps ( eliminate video id from string )
            TEMPLINE=${LINE#[a-zA-Z0-9_\-]* }
            # Perform second step (eliminate NA from the ending) 
            TEMPLINE=$(echo ${TEMPLINE%NA})
            # Perform third step (limit string to 80 chars) and append the result to the array
            MYARRAY[COUNTER+1]=$(echo ${TEMPLINE:0:80})
    	    # Increment counter by two, since we have appended two items to the array
            ((COUNTER+=2))
        done
        # Let the user select one of the videos
        VIDEO=$(whiptail --menu "Please select a stream..." --title "Search Results" --ok-button "Stream" --cancel-button "Back" $MENUHEIGHT 100 $((MENUHEIGHT-8))  ${MYARRAY[@]} 3>&1 1>&2 2>&3)
        # Did the user cancel?
        if [[ $? == 1 ]]; then
           #YES - Break out of the loop
           break
        fi
        # Store the amount of elements contained in the manu array
        ARRAYLENGTH=${#MYARRAY[@]}
        # Default title
        VIDEOTITLE="Default"
        # Get the video title to provide vlc with ne neccessary data ( a bit hacky, but not passible any other way )
        for (( COUNTER=0; COUNTER<=$ARRAYLENGTH ;COUNTER+=2)); do
            # Is this the selected file?
            if [[ ${MYARRAY[COUNTER]} == $VIDEO  ]]; then
                #YES - Then save the title
                VIDEOTITLE=${MYARRAY[COUNTER+1]:11:255}
            fi
        done
        # We don't need this anymore, but we need it to be empty if we decide to give it another go
        unset $MYARRAY
        # Is the video string empty?
        if [[ "$VIDEO" != "" ]]; then
        	# NO - Play the video
            # Since VLC does a not-so-good job extracting the video URL, we need to preprocess the URL with yt-dlp
            # Show this to the user (note: whiptails infobox does not show under all terminals so we need to specifically open an ANSI term)
            TERM=ansi whiptail --infobox "Preparing video URL..." 7 28
            VIDEO=`yt-dlp --extractor-args youtube:player_client=ios,web --get-url --extract-audio -f bestaudio "https://www.youtube.com/watch?v=${VIDEO:1:255}"`
            #VIDEO="https://www.youtube.com/watch?v=$VIDEO"
            # Play the extracted url - this works well, but looses the video's title ( I guess you can't have it all )
            eval $YTPLAYER \"$VIDEO\" --meta-title \"$VIDEOTITLE\"
        fi
    done
}

function search_radios () {
    # Ask for the search term
    SEARCHTERM=$(whiptail --inputbox "Please provide a search term :" 8 69 --ok-button "Search" --cancel-button "Back" --title "Search radios..." 3>&1 1>&2 2>&3)
    SEARCHTYPE="byname" #byname, bycountry, bylanguage, bytag TODO: Write a selection menu
    # Is the searchterm empty
    if [[ "$SEARCHTERM" = "" ]]; then
	#YES - Then exit the funcion and go back to the main menu.
       return
    fi
    #Show a temporary screen ( just to not to leave the screen blank )
    TERM=ansi whiptail --infobox "Retrieving radio stations..." 7 32
    # Retrieve data from the radio browser api TODO: Put address into configuration file
    RESULT=`curl -d "limit=50" -s $APILOCATION/$SEARCHTYPE/${SEARCHTERM/ /%20} | jq -S '.[0:50]' | grep -E "\"codec\"|\"bitrate\"|\"country\"|\"name\"|\"url\""`
    # Prepare an empty array
    THEARRAY=()
    # Create an array from data
    for LINE in $RESULT; do 
        THEARRAY+=($LINE)
    done;
    # Determine array length
    ARRAYLENGTH=${#THEARRAY[@]}
    # Initialize a counter
    COUNTER=0
    # Create an array for the menu iterating over the result
    for ((i = 0 ; i < $ARRAYLENGTH ; i+=5 )); do 
        # Determine bitrate ( not every radio broadcasts this )
        BITRATE=`echo ${THEARRAY[i]:15:100} | grep -o -E "^[0-9]*"`
        # Format the data ( 3 digits leading zero )
        BITRATE=`printf "%3dkbps" "$BITRATE"`
        # Determine the strean fomat ( again, not every station broadcasts this )
        FORMAT=`echo ${THEARRAY[i+1]} | cut -d'"' -f4`
        # Format the data ( 4 digits, left align)
        FORMAT=`printf "%-4s" "${FORMAT:0:4}"`
        # Determine the country of the radio station
        COUNTRY=`echo ${THEARRAY[i+2]} | cut -d'"' -f4`
        # Format the data ( 13 digits, string, right align )
        COUNTRY=`printf "%13s" "${COUNTRY:0:13}"`
        # Create an index for the menu ( the number in from of the menu line )
        INDEXNO=$((i/5))
        # Format the data ( two digits, leading zero )
        INDEXNO=`printf "%02d" "$INDEXNO"`
        # Extract the name from the data array
        NAME=`echo ${THEARRAY[i+3]} | cut -d'"' -f4` 
        # Format the name ( 58 characters, left align )
        NAME=`printf "%-58s" "$NAME"`
        # Determine the URL of the station
        URL=`echo ${THEARRAY[i+4]} | cut -d'"' -f4` 
        # Insert data into the menuarray
        MENUARRAY[COUNTER]=$(echo "$INDEXNO $BITRATE $FORMAT $COUNTRY")
        # Insert the name into the menuarray
        MENUARRAY[COUNTER+1]=$(echo ": ${NAME:0:58}")
        # Increment the counter by two ( since we have added two elements )
        ((COUNTER+=2))
    done
    while :; do
        # Let the user select the station to listen to
        RADIO=$(whiptail --menu "Please select a stream..." --title "Search Results" --ok-button "Stream" --cancel-button "Back" 18 100 10  ${MENUARRAY[@]} 3>&1 1>&2 2>&3)
        # Did the user select anything?
        if [[ $? = 1 ]]; then
	    # NO - Then exit the funcion and go back to the main menu.
           return
        fi
        # Prepare the index of the URL ( sorry for reutilizing variables here ;)
        URL=`echo ${RADIO:0:2}`
        # Remove the leading zero ( if not, conversion errors appear )
        URL=${URL#0}
        # Calculate the arrayindex
        ARRAYINDEX=$((URL*5+4))
        # Extract the real URL from the data
        URL=`echo ${THEARRAY[ARRAYINDEX]} | cut -d'"' -f4`
        # Play the stream with the configured player
        eval $RADIOPLAYER \"$URL\"
    done
}

# This function searches inside a preconfigured directory
function play_locally () {
   # Show a small splash screen
   TERM=ansi whiptail --infobox "Launching MP3 Player..." 7 28
   # Depending on the player, it may need a Library Directory
   # Is such a library path neccessary
   if [[ $NEEDSLIBRARYPATH == 'YES' ]]; then
       #YES - Provide the Library Path
       eval $MUSICPLAYER $LOCALDIRECTORY
   else
       #NO - Launch without library path
       eval $MUSICPLAYER
   fi
}


# Inifite loop until an empty seach string is provided.
while : ; do
    # Present the main menu
    MENUITEM=$(whiptail --menu "Please Select" --ok-button "Select" --cancel-button "Quit" --title "Main Menu" 12 69 4 \
        "1" "Search and Play Youtube Videos" \
        "2" "Select and Stream Internet Radio" \
        "3" "Play Local Files from Directory" \
        3>&1 1>&2 2>&3)
    # Did the user select the 'Exit' button?
    if [[ $? == 1 ]]; then
        #YES - Exit with no error code
	clear
        exit 0
    fi
    # What did the user select?
    case $MENUITEM in

        1) # The Youtube Search Option
            search_youtube
        ;;

        2) # The Internet Radio Serach Option
           search_radios
        ;;
        
        3) # Local Play
           play_locally
        ;;
        *)
        ;;
    esac
done
